@using MWRCheatSheet.Model
@inject IJSRuntime JSRuntime

@code {
    protected static readonly TimeZoneInfo NewYorkTimeZone = TimeZoneInfo.FindSystemTimeZoneById("America/New_York");
    protected static readonly TimeZoneInfo ChicagoTimeZone = TimeZoneInfo.FindSystemTimeZoneById("America/Chicago");
    protected static readonly TimeZoneInfo LosAngelesTimeZone = TimeZoneInfo.FindSystemTimeZoneById("America/Los_Angeles");
    protected static readonly TimeZoneInfo DefaultTimeZone = NewYorkTimeZone;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public AppState? AppState { get; set; }

    protected bool ComponentInitialized { get; private set; }

    protected override void OnInitialized()
    {
        this.ComponentInitialized = true;
        this.StateHasChanged();
    }

    protected static string FormatTimeSpan(TimeSpan Duration)
        => $"({(Duration.Hours > 0 ? $"{Duration.Hours}hr " : string.Empty)}{(Duration.Minutes > 0 ? $"{Duration.Minutes}min" : string.Empty)}{(Duration.Seconds > 0 ? $" {Duration.Seconds}sec" : string.Empty)})";

    protected static DateTimeOffset GetNextEvent(DayOfWeek day, TimeOnly time, TimeZoneInfo timeZone)
    {
        var currentTimeInEventTimeZone = DateTimeOffset.Now.ToOffset(timeZone.BaseUtcOffset);

        var nextEventTime = currentTimeInEventTimeZone.AddHours(time.Hour - currentTimeInEventTimeZone.Hour);
        nextEventTime = nextEventTime.AddMinutes(time.Minute - nextEventTime.Minute);

        var nextEvent = nextEventTime;
        while (nextEvent.DayOfWeek != day || nextEvent < currentTimeInEventTimeZone)
        {
            nextEvent = nextEvent.AddDays(1);
        }

        return nextEvent;
    }

    protected async Task CopyTextToClipboardAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    protected async Task<bool> WebShareAllowedAsync()
    {
        return await JSRuntime.InvokeAsync<bool>("webshareAllowed");
    }

    protected async Task ShareMessageAsync(string message, string imageUrl)
    {
        const string DefaultWebShareTitle = "MWR";

        await JSRuntime.InvokeVoidAsync("webshare", DefaultWebShareTitle, message, imageUrl);
    }

    protected Task ShareMessageAsync(string message, Image image) => ShareMessageAsync(message, Constants.GetImageUrl(image));

}
