@page "/events"
@inherits Components.ComponentBase
@using Components
@using MWRCheatSheet.Components
@using MWRCheatSheet.Model
@inject MWRCheatSheet.Model.UISettings UI
@inject NavigationManager NavigationManager

<MudStack>
    @if(UI.EnglishLocale.Events.Any(e => e.Day == null))
    {
        <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Daily</MudText>
        @foreach (var recurringEvent in UI.EnglishLocale.Events.Where(e => e.Day == null))
        {
            <div id="@recurringEvent.Anchor">
                <RecurringEvent Header="@recurringEvent.Header"
                                Archive="@recurringEvent.Archive"
                                Url="@recurringEvent.Link"
                                Password="@recurringEvent.Password"
                                ImageUri="@recurringEvent.Image"
                                Recurrence="@((recurringEvent.Day, recurringEvent.Time, DefaultTimeZone))"
                                Text="@($"{recurringEvent.ShareableHeader}{Environment.NewLine}{Environment.NewLine}{(recurringEvent.ShareableHost == null ? string.Empty : $"Hosted By:{Environment.NewLine}{recurringEvent.ShareableHost}{Environment.NewLine}{Environment.NewLine}")}{(recurringEvent.ShareableGuest == null ? string.Empty : $"Featuring:{Environment.NewLine}{recurringEvent.ShareableGuest}{Environment.NewLine}{Environment.NewLine}")}{GetNextEvent(DateTime.Now.DayOfWeek, recurringEvent.Time, DefaultTimeZone):dddd, MMMM d}{Environment.NewLine}{Environment.NewLine}{GetRegionalTimes(GetNextEvent(DateTime.Now.DayOfWeek, recurringEvent.Time, DefaultTimeZone))}{Environment.NewLine}{Environment.NewLine}Go to:{Environment.NewLine}{recurringEvent.VanityLink}{(recurringEvent.MeetingId == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}ID: {recurringEvent.MeetingId}")}{(recurringEvent.Password == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}Password: {recurringEvent.Password}")}{Environment.NewLine}{Environment.NewLine}{recurringEvent.HashTags}")" />
            </div>
        }
    }

    @foreach(var day in UI.EnglishLocale.Events.Where(e => e.Day != null).Select(e => e.Day).Distinct())
    {
        <br />
        <br />
        <div id="@day">
            <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">@day</MudText>
            <MudStack>
                @foreach (var recurringEvent in UI.EnglishLocale.Events.Where(e => e.Day == day).OrderBy(e => e.Time))
                {
                    <div id="@recurringEvent.Anchor">
                        <RecurringEvent Header="@recurringEvent.Header"
                                        Archive="@recurringEvent.Archive"
                                        Url="@recurringEvent.Link"
                                        Password="@recurringEvent.Password"
                                        ImageUri="@recurringEvent.Image"
                                        Recurrence="@((recurringEvent.Day, recurringEvent.Time, DefaultTimeZone))"
                                        Text="@($"{recurringEvent.ShareableHeader}{Environment.NewLine}{Environment.NewLine}{(recurringEvent.ShareableHost == null ? string.Empty : $"Hosted By:{Environment.NewLine}{recurringEvent.ShareableHost}{Environment.NewLine}{Environment.NewLine}")}{(recurringEvent.ShareableGuest == null ? string.Empty : $"Featuring:{Environment.NewLine}{recurringEvent.ShareableGuest}{Environment.NewLine}{Environment.NewLine}")}{GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, DefaultTimeZone):dddd, MMMM d}{Environment.NewLine}{Environment.NewLine}{GetRegionalTimes(GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, DefaultTimeZone))}{Environment.NewLine}{Environment.NewLine}Go to:{Environment.NewLine}{recurringEvent.VanityLink}{(recurringEvent.MeetingId == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}ID: {recurringEvent.MeetingId}")}{(recurringEvent.Password == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}Password: {recurringEvent.Password}")}{Environment.NewLine}{Environment.NewLine}{recurringEvent.HashTags}")" />
                    </div>
                }
            </MudStack>
        </div>
    }
</MudStack>
@code {
    private static readonly TimeZoneInfo[] BusinessStandardTimeZonesOrdered = [DefaultTimeZone, ChicagoTimeZone, LosAngelesTimeZone];

    protected override void OnInitialized()
    {
        NavigationManager.NavigateTo($"/events#{DateTime.Now.DayOfWeek}", true);
    }

    private static string GetRegionalTimes(DateTimeOffset dateTime)
    {
        var regionalTimes = BusinessStandardTimeZonesOrdered
            .Select(timeZone => $"{dateTime.ToOffset(timeZone.BaseUtcOffset).ToString("h:mmt").ToLower()}{timeZone.StandardName.First()}{timeZone.StandardName.Substring(1).ToLower()}")
            .Aggregate((formatted, next) => $"{formatted}/ {next}");

        return regionalTimes;
    }
}
