@page "/events"
@inherits Components.ComponentBase
@using Components
@using MWRCheatSheet.Components
@using MWRCheatSheet.Model
@inject MWRCheatSheet.Model.UISettings UI
@inject NavigationManager NavigationManager

<MudStack>
    @foreach(var day in _events.Where(e => e.Day != null).Select(e => e.Day).Distinct().OrderBy(day => day))
    {
        <br />
        <br />
        <div id="@day">
            <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">@day</MudText>
            <MudStack>
                @foreach (var recurringEvent in _events.Where(e => e.Day == day).OrderBy(e => e.Time))
                {
                    <div id="@recurringEvent.Anchor">
                        <RecurringEvent Header="@recurringEvent.Header"
                                        Archive="@recurringEvent.Archive"
                                        Url="@recurringEvent.Link"
                                        Password="@recurringEvent.Password"
                                        ImageUri="@recurringEvent.Image"
                                        Recurrence="@((recurringEvent.Day, recurringEvent.Time, Constants.DefaultTimeZone))"
                                        Text="@($"{recurringEvent.ShareableHeader}{Environment.NewLine}{Environment.NewLine}{(recurringEvent.ShareableHost == null ? string.Empty : $"Hosted By:{Environment.NewLine}{recurringEvent.ShareableHost}{Environment.NewLine}{Environment.NewLine}")}{(recurringEvent.ShareableGuest == null ? string.Empty : $"Featuring:{Environment.NewLine}{recurringEvent.ShareableGuest}{Environment.NewLine}{Environment.NewLine}")}{GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, Constants.DefaultTimeZone):dddd, MMMM d}{Environment.NewLine}{Environment.NewLine}{GetRegionalTimes(GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, Constants.DefaultTimeZone))}{Environment.NewLine}{Environment.NewLine}Go to:{Environment.NewLine}{recurringEvent.VanityLink}{(recurringEvent.MeetingId == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}ID: {recurringEvent.MeetingId}")}{(recurringEvent.Password == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}Password: {recurringEvent.Password}")}{Environment.NewLine}{Environment.NewLine}{recurringEvent.HashTags}")" />
                    </div>
                }
            </MudStack>
        </div>
    }
</MudStack>
@code {
    private static readonly TimeZoneInfo[] BusinessStandardTimeZonesOrdered = [Constants.DefaultTimeZone, Constants.ChicagoTimeZone, Constants.LosAngelesTimeZone];

    private Event[] _events = [];

    protected override void OnInitialized()
    {
        var generatedDailyEvents = new List<Event>();

        var dailyEvents = UI.EnglishLocale.Events.Where(e => e.Day == null).ToArray();
        foreach (var dailyEvent in dailyEvents)
        {
            foreach (var dayOfWeek in Enum.GetValues<DayOfWeek>())
            {
                var nextEventOnDayOfWeek = GetNextEvent(dayOfWeek, dailyEvent.Time, Constants.DefaultTimeZone);
                if (nextEventOnDayOfWeek <= dailyEvent.EndDate)
                {
                    generatedDailyEvents.Add(dailyEvent with { Day = dayOfWeek });
                }
            }
        }

        _events = UI.EnglishLocale.Events
            .Except(dailyEvents)
            .Union(generatedDailyEvents).ToArray();

        // auto-navigate to the current day if a specific anchor was not already specified
        if (!NavigationManager.Uri.Contains("#"))
        {
            NavigationManager.NavigateTo($"/events#{DateTime.Now.DayOfWeek}", true);
        }
    }

    private static string GetRegionalTimes(DateTimeOffset dateTime)
    {
        var regionalTimes = BusinessStandardTimeZonesOrdered
            .Select(timeZone => $"{dateTime.ToOffset(timeZone.BaseUtcOffset).ToString("h:mmt").ToLower()}{timeZone.StandardName.First()}{timeZone.StandardName.Substring(1).ToLower()}")
            .Aggregate((formatted, next) => $"{formatted}/ {next}");

        return regionalTimes;
    }
}
